# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Publish mod

on:
  push:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      info:
        description: 'manual trigger'
jobs:
  build:
    runs-on: windows-2019
    strategy:
      matrix:
        python-version: [3.8]

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}

      - name: Update pip
        run: |
          python -m pip install --upgrade pip

      - name: Install boto3
        run: |
          pip install boto3

      - name: Install pycryptodome
        run: |
          pip install pycryptodome

      - name: Pack mod and upload
        run: |
          python main.py
        env:
          PARATRANZ_SECRET: ${{ secrets.PARATRANZ_SECRET }}
          AWS_S3_ACCESS_KEY: ${{ secrets.AWS_S3_ACCESS_KEY }}
          AWS_S3_SECRET_ACCESS_KEY: ${{ secrets.AWS_S3_SECRET_ACCESS_KEY }}

      - name: push translation
        run: |
          dir
          git config --global user.email "matanki.saito@gmail.com"
          git config --global user.name "matanki.saito"
          git config --global url."https://${{ secrets.GITHUB_TOKEN }}:x-oauth-basic@github.com/".insteadOf "https://github.com/"
          git add -A
          git commit -m "Save/Update files [ci skip]"
          git push origin HEAD:master
        shell: cmd
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          body: |
            new mod released!
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./out/dist.v2.json
          asset_name: dist.v2.json
          asset_content_type: application/json

      - name: Get steamcmd
        run: |
          curl https://steamcdn-a.akamaihd.net/client/installer/steamcmd.zip --output steamcmd.zip
          Expand-Archive -Path steamcmd.zip

      - name: Set credentials
        run: |
          python download_credentials.py
          dir
          cd steamcmd
          dir
          cd config
          dir
        env:
          AWS_S3_ACCESS_KEY: ${{ secrets.AWS_S3_ACCESS_KEY }}
          AWS_S3_SECRET_ACCESS_KEY: ${{ secrets.AWS_S3_SECRET_ACCESS_KEY }}

      - name: uploading steam workshop
        run: |
          cd steamcmd
          dir
          steamcmd.exe -dev -textmode -ignoredxsupportcfg +login %STEAM_LOGIN_NAME% %STEAM_LOGIN_PASSWORD% +workshop_build_item ..\resource\main.vdf +quit
        env:
          STEAM_LOGIN_NAME: ${{ secrets.STEAM_LOGIN_NAME }}
          STEAM_LOGIN_PASSWORD: ${{ secrets.STEAM_LOGIN_PASSWORD }}
        shell: cmd
        continue-on-error: true
